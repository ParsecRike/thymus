<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<!-- All relative href/src URLs should be relative to the application's context defined on the Thymus script  -->
<body>
	<div id="advusage" class="panel panel-default">
		<div class="panel-heading">
			<h2>
				Events, Handlers and Programmatic Usage
			</h2>
		</div>
		<div class="panel-body app-code">
			<h3 id="frag">Fragment Events</h3>
			<p>
				After each time an attempt to process a fragment is made a <a
					href="#fragevent">fragment event</a> is fired. Also, each
				<code>script</code>
				tag within a <b>result siphon</b> will also fire its own <b>fragment
					event</b>. Event propagation utilizes the <a
					href="http://api.jquery.com/trigger/">JQuery event trigger</a>
				mechanism. One way to listen to all incoming fragment events is to
				supply a
				<code>function</code>
				to the
				<code>data-thx-onfrag</code>
				attribute on the <b>thymus.js</b> tag itself:
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;meta</span> <span style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span style="color: #000080; font-weight: bold">/&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">function</span> fragListener(event) {
			<span style="color: #008800; font-style: italic">// event.namespace will be frag.thx</span>
			<span style="color: #008800; font-style: italic">// &quot;this&quot; will reference the element that loaded the fragment</span>
			<span style="color: #000080; font-weight: bold">var</span> template = <span style="color: #000080; font-weight: bold">this</span>;
			<span style="color: #000080; font-weight: bold">switch</span> (event.type) {
			<span style="color: #000080; font-weight: bold">case</span> <span style="color: #0000FF">&#39;beforeload&#39;</span>:
				<span style="color: #008800; font-style: italic">// handle event</span>
				<span style="color: #000080; font-weight: bold">break</span>;
			<span style="color: #000080; font-weight: bold">case</span> <span style="color: #0000FF">&#39;load&#39;</span>:
				<span style="color: #008800; font-style: italic">// handle event</span>
				<span style="color: #000080; font-weight: bold">break</span>;
			}
		}
	<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span style="color: #FF0000">data-thx-context-path=</span><span style="color: #0000FF">&quot;.&quot;</span>
		<span style="color: #FF0000">data-thx-onfrag=</span><span style="color: #0000FF">&quot;fragListener()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>
			<p>
				In the example above a function called <i>fragListener</i> is
				defined as the
				<code>data-thx-onfrag</code>
				. Every time an attempt is made to process a <b>result siphon</b>
				the <i>window.fragListener</i> function will be called. Within the
				function ,
				<code>this</code>
				will reference the element that contained the <b>routing
					attribute</b> while the passed
				<code>event</code>
				will reference a <a href="#fragevent">fragment event</a>. Supplied
				functions can also contain additional argument values by adding them
				to the function signature (e.g.
				<code>data-thx-onfrag="fragListener(event, 'myValue')"</code>
				), but the function will always pass
				<code>event</code>
				as its first argument.
			</p>
			<p id="fraginjs">
				Similarly, we could have <a href="#fragseventprog">programmatically</a>
				listened for the event using the element where the <b>routing
					attribute</b> is defined. A <a href="#fragevent">fragment event</a>
				contains the following properties:
			</p>
			<div id="fragevent" class="panel panel-default">
				<div class="panel-heading">
					<h2>
						Fragment Event (extends <a
							href="http://api.jquery.com/category/events/event-object/">EventObject</a>)
					</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							one of the event types below
							<ul>
								<li><code>beforehttp.thx.frag</code> - before any <b>parameter
										siphon</b> data has been sent for fragment retrieval using the <b>routing
										attribute</b>'s <b>path</b> (when the <a
									href="http://api.jquery.com/event.isDefaultPrevented/">event.isDefaultPrevented()</a>
									returns <b>true</b> nothing will be sent and therefore no
									fragment will be retrieved)</li>
								<li><code>beforedom.thx.frag</code> - after any <b>parameter
										siphon</b> data has been sent for fragment retrieval using the <b>routing
										attribute</b>'s <b>path</b>, but not updated in the DOM using the
									<b>result siphon</b> and <b>destination siphon</b> (when the <a
									href="http://api.jquery.com/event.isDefaultPrevented/">event.isDefaultPrevented()</a>
									returns <b>true</b> any <b>result siphon</b> fragments will not
									be updated in the DOM)</li>
								<li><code>afterdom.thx.frag</code> - after any <b>parameter
										siphon</b> data has been sent for fragment retrieval using the <b>routing
										attribute</b>'s <b>path</b>and any fragments are updated in the
									DOM using the <b>result siphon</b> and <b>destination
										siphon</b> (any child/nested fragments may not be processed/loaded
									yet)</li>
								<li><code>load.thx.frag</code> - after any <b>parameter
										siphon</b> data has been sent for fragment retrieval using the <b>routing
										attribute</b>'s <b>path</b>, updated in the DOM using the <b>result
										siphon</b> and <b>destination siphon</b> and all child/nested <b>routing
										attribute</b>'s have been loaded/cancelled/etc.</li>
							</ul>
							Any of the above event types can be used when
							<a href="#fraginjs">programatically registering a listener
								for the event</a>). See <a
								href="http://api.jquery.com/on/#event-names">JQuery event
								naming</a> for namespace convention details.
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>sourceEvent</code>
						</div>
						<div class="col-md-10">
							the <b>event siphon</b> defined in the <b>routing attribute</b> of the
							fragment that initiated the fragment event (may be undefined/null
							when not provided in the <b>routing attribute</b>)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>httpMethod</code>
						</div>
						<div class="col-md-10">the HTTP verb used to capture the
							fragment</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>paramsSiphon</code>
						</div>
						<div class="col-md-10">
							the <a href="#paramsiphon"><b>parameter siphon</b></a> defined in
							the <b>routing attribute</b> of the fragment (<a
								href="http://api.jquery.com/category/selectors/">JQuery
								selector</a> that extracted key/value pairs that were sent to the
							server when retrieving the fragment- may be undefined if not
							provided in the <b>routing attribute</b>)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>pathSiphon</code>
						</div>
						<div class="col-md-10">
							the <b>path siphon</b> defined in the <b>routing attribute</b>
							of the fragment
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>resultSiphon</code>
						</div>
						<div class="col-md-10">
							the <b>result siphon</b> defined in the <b>routing attribute</b>
							of the fragment (usually a <a
								href="http://api.jquery.com/category/selectors/">JQuery
								selector</a>, but may also be a <a href="#fragshandler"><code>function</code></a>)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>destSiphon</code>
						</div>
						<div class="col-md-10">
							either the DOM element(s), a <a
								href="http://api.jquery.com/category/selectors/">JQuery
								selector</a> to the DOM element(s) where the fragment will be
							placed, or
							<code>undefined</code>
							when the fragment is a
							<code>script</code>
							or a <b>destination siphon</b> was not defined in the <b>routing
								attribute</b>.
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>destScope</code>
						</div>
						<div class="col-md-10">
							the DOM node(s) that were designated as the destination or the
							parent node when the fragment was not HTML content or outer HTML
							string when the fragment was a
							<code>script</code>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>agentSiphon</code>
						</div>
						<div class="col-md-10">
							either the DOM element(s), a <a
								href="http://api.jquery.com/category/selectors/">JQuery
								selector</a> to the DOM element(s) where any missing <b>routing
								attribute</b>s were extracted, or
							<code>undefined</code>
							when an <b>agent siphon</b> was not defined in the <b>routing
								attribute</b>.
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>routingStack</code>
						</div>
						<div class="col-md-10">
							an array of fragment objects in order from the current fragment
							to each of the consecutive nested parent fragments (will have
							only one entry when the fragment is not nested within any other
							fragments). Each entry will contain the following properties:
							<ul>
								<li><code>pathSiphon</code> - the <b>path siphon</b>
									defined in the <b>routing attribute</b> of the fragment</li>
								<li><code>resultSiphon</code> - the <b>result siphon</b>
									defined in the <b>routing attribute</b> of the fragment</li>
								<li><code>destSiphon</code> - the <b>destination siphon</b>
									defined in the <b>routing attribute</b> of the fragment</li>
								<li><code>destScope</code> - the fragment destination scope
									of the fragment</li>
							</ul>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCount</code>
						</div>
						<div class="col-md-10">the number of total fragments load
							attempts</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCurrTotal</code>
						</div>
						<div class="col-md-10">the current number of total
							fragments that will or have had an attempt to load (may grow as
							new script tags or nested fragments are discovered)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragPendingPeerCount</code>
						</div>
						<div class="col-md-10">the number of child fragments that
							are pending for the current fragment's parent fragment (if any)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragIsAsync</code>
						</div>
						<div class="col-md-10">true when the fragment is/has been
							loaded asynchronously</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragType</code>
						</div>
						<div class="col-md-10">
							the <a href="#domdestinationtarget"><b>destination type
									siphon</b> fragment type</a>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragWin</code>
						</div>
						<div class="col-md-10">
							the
							<code>window</code>
							or
							<code>frame</code>
							that the fragment is targeting
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragWinTarget</code>
						</div>
						<div class="col-md-10">
							the
							<code>window</code>
							or
							<code>frame</code>
							target name
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragWinHistoryFlag</code>
						</div>
						<div class="col-md-10">
							the
							<code>window</code>
							options passed into
							<code>window.open</code>
							when full page navigation is performed using the HTTP <i>GET</i>
							verb in the same window
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragWinOptions</code>
						</div>
						<div class="col-md-10">
							the
							<code>window</code>
							options passed into
							<code>window.open</code>
							when full page navigation is performed using the HTTP <i>GET</i>
							verb
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>scope</code>
						</div>
						<div class="col-md-10">
							the DOM node(s) for which the fragment was loaded under
							(typically this will be the
							<code>html</code>
							node during automatic fragment loading; during a
							programmatically/user initiated fragment, the root node that
							initiated the fragment load)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>error</code>
						</div>
						<div class="col-md-10">
							an object that extends
							<code>window.Error</code>
							with a detailed
							<code>message</code>
							that will also contain the following properties (if an error did
							not occur error will be null):
							<ul>
								<li><code>cause</code> - the original cause of the <code>Error</code>
									(if any)</li>
								<li><code>status</code> - the HTTP status text (if any)</li>
								<li><code>statusCode</code> - the HTTP status code (e.g.
									404) returned from XHR (if any)</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<div class="alert alert-warning">
				<strong>Reminder!</strong> Keep in mind the
				<code>function</code>
				defined as the
				<code>data-thx-onfrag</code>
				must be available for execution at the time that the fragment event
				received.<br /> <br /> <strong>Note:</strong> There are two ways
				to manipulate/massage incoming fragment content. The first way is
				using the
				<code>data-thx-onfrag</code>
				attribute and/or registering a <a href="#fraginjs">fragment
					event listener</a>; Both of which require evaluating the supplied <a
					href="#fragevent">fargment event</a>. The second way is using a <a
					href="#funcfrags"><b>result siphon</b> handler</a>.
			</div>
			<h3 id="frags">Fragments Events</h3>
			<p>
				Similar to <a href="#frag">fragment events</a>, a <a
					href="#fragsevent">fragments event</a> will be fired once an
				attempt to process all <b>routing attribute</b>'s fragments/
				<code>script</code>
				/etc. has been made. One way to capture fragments events is to
				supply a
				<code>function</code>
				to the
				<code>data-thx-onfrags</code>
				on the <b>thymus.js</b> tag itself:
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;meta</span> <span style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span style="color: #000080; font-weight: bold">/&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">function</span> done(event) {
			<span style="color: #008800; font-style: italic">// &quot;this&quot; will reference the element that loaded the fragments</span>
			<span style="color: #008800; font-style: italic">// (the HTML element when auto-loaded)</span>
			<span style="color: #000080; font-weight: bold">var</span> template = <span style="color: #000080; font-weight: bold">this</span>;
			<span style="color: #008800; font-style: italic">// handle event</span>
		}
	<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span style="color: #FF0000">data-thx-context-path=</span><span style="color: #0000FF">&quot;.&quot;</span>
		<span style="color: #FF0000">data-thx-onfrags=</span><span style="color: #0000FF">&quot;done()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>
			<p>
				In the example above a
				<code>function</code>
				called <i>done</i> is defined as the
				<code>data-thx-onfrags</code>
				. Once an attempt is made to load all the defined <b>routing
					attribute</b>'s fragments/scripts/nested fragments and a response is
				returned for each of them the example <i>window.done</i>
				<code>function</code>
				will be called with
				<code>this</code>
				referencing the element that initiated the loading of the fragments
				(the HTML element when <a href="#deferred">auto-loaded</a>) and
				<code>event</code>
				referencing a <a href="#fragsevent">fragments event</a>. Supplied
				functions can also contain additional arguments by adding them to
				the function signature (e.g.
				<code>data-thx-onfrags="done(event, 'myValue')"</code>
				). When additional arguments are specified the &quot;event&quot;
				argument must be explicilty declared in the function signature if
				access to the event within the function is required.
			</p>
			<p id="fragsinjs">
				Similarly, we could have <a href="#fragseventprog">programmatically</a>
				listened for the event using the element(s) where the <b>routing
					attribute</b>(s) are defined. A <a href="#fragsevent">fragments
					event</a> contains the following properties:
			</p>
			<div id="fragsevent" class="panel panel-default">
				<div class="panel-heading">
					<h2>
						Fragments Event (extends <a
							href="http://api.jquery.com/category/events/event-object/">EventObject</a>)
					</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							the type of event (defaults to
							<code>load.thx.frags</code>
							which is used when <a href="#fragsinjs">programatically
								registering a listener for the event</a>)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCancelCount</code>
						</div>
						<div class="col-md-10">the total number of fragments that
							were cancelled during the action</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCount</code>
						</div>
						<div class="col-md-10">the total number of fragments that
							were attempted to load (including nested fragments and scripts)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>loadTime</code>
						</div>
						<div class="col-md-10">the total number of milliseconds it
							took to load the fragments (including nested fragments and
							scripts)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>scope</code>
						</div>
						<div class="col-md-10">
							the DOM node for which the fragments were loaded under
							(typically this will be the
							<code>html</code>
							node unless the fragments have been loaded manually via a
							different node)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>errors</code>
						</div>
						<div class="col-md-10">
							an array of
							<code>window.Error</code>
							objects; each containing the following properties:
							<ul>
								<li><code>cause</code> - the original cause of the <code>Error</code>
									(if any)</li>
								<li><code>status</code> - the HTTP status text (if any)</li>
								<li><code>statusCode</code> - the HTTP status code (e.g.
									404) returned from XHR (if any)</li>
								<li><code>fragSrc</code> - when the cause of the error
									is due to a specific fragment all of the <a href="#fragevent">fragment
										event</a> properties (except <code>type</code>) will be populated
									in this object</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<h3 id="funcfrags">Customizing Fragment Results</h3>
			<p>
				Not only can <b>result siphon</b>s contain corresponding <a
					href="http://api.jquery.com/category/selectors/">JQuery
					selectors</a> and/or <a href="#otherfragtargets">siphon resolvers</a>,
				they can also contain a
				<code>function</code>
				that will handle raw fragment results.
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">function</span> handleFrag() {
		<span style="color: #000080; font-weight: bold">var</span> handle = <span style="color: #000080; font-weight: bold">this</span>.handle;
		<span style="color: #000080; font-weight: bold">var</span> newData = handle.data;
		<span style="color: #000080; font-weight: bold">if</span> (h.fragSrc.error) {
			<span style="color: #008800; font-style: italic">// handle Error object</span>
		} <span style="color: #000080; font-weight: bold">else</span> {
			<span style="color: #008800; font-style: italic">// do something with newData then continue the fragment process for DOM propigation</span>
			handle.proceed(newData);
		}
	}
<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">data-thx-include=</span><span style="color: #0000FF">&quot;frags/nav/nav :: handleFrag()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
</pre></div>
			<p>
				The <b>result siphon</b> handler can also be used in <a
					href="#httpmethods"><b>siphon attribute</b>s</a> as well. A <b>result
					siphon</b> handler will contain the following object within the
				function's
				<code>this.handle</code>
				:
			</p>
			<div id="fragshandler" class="panel panel-default">
				<div class="panel-heading">
					<h2>Fragment <b>result siphon</b> Handler</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							either <b>include</b>, <b>replace</b> or <b>update</b>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>data</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX data</a> (result string)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>status</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX status</a>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>xhr</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX XHR object</a>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragSrc</code>
						</div>
						<div class="col-md-10">
							an object that will include all of the <a href="#fragevent">fragment
								event</a> properties (except
							<code>type</code>
							)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>proceed</code>
						</div>
						<div class="col-md-10">
							a
							<code>function</code>
							that will process the <b>routing attribute</b>'s fragment result.
							Arguments:
							<ol>
								<li>the result <b>data</b> (raw or node) that will be <i>included</i>,
									<i>replaced</i> or <b>updated</b>
								</li>
							</ol>
						</div>
					</div>
				</div>
			</div>
			<div class="alert alert-warning">
				<strong>Reminder!</strong> Keep in mind the
				<code>function</code>
				defined as the <b>result siphon</b> handler must be available for
				execution at the time that the fragment result is returned.
			</div>
			<h3 id="fragsprog">Programmatic Usage</h3>
			<p>
				By default, <b>thymus.js</b> loads any fragment/navigation/etc.
				attribute designations that may exist within the
				<code>html</code>
				tag, at startup.To <i id="deferred">defer</i> <b>thymus.js</b> from
				loading any fragments until a later time, just add a
				<code>data-thx-deferred-load="true"</code>
				to the <b>thymus.js</b>
				<code>script</code>
				declaration. Loading <b>thymus.js</b> fragments anytime after
				deferment can be accomplished by executing a <a
					href="#actionfragsload">fragments load action</a>.
			</p>
			<p>
				Any of the following <b>thymus.js</b> actions can be invoked by
				calling
				<code>$(theSelector).thymus(theAction)</code>
				(i.e.
				<code>$('html').thymus('frags.load');</code>
				) using one of the following actions:
			</p>
			<ul>
				<li id="actionfragsload"><code>frags.load</code> - looks for
					template attributes on DOM elements under the element that
					initiated the <b>thymus.js</b> plug-in call and loads any
					fragments/nested fragments, performs any <a href="#actionnavreg">navigation
						registrations</a> needed within returned fragments and</li>
				<li id="actionnavreg"><code>nav.register</code> - registers (or
					re-registers) any <a href="#httpmethods"><b>siphon attribute</b>s</a>
					on DOM elements under the element that initiated the <b>thymus.js</b>
					plug-in call</li>
			</ul>
			<p>
				Of course, the <a href="http://api.jquery.com/category/selectors/">JQuery
					selector</a> doesn't have to be
				<code>html</code>
				, but keep in mind that each selector designation used to invoke <b>thymus.js</b>
				actions will reprocess any corresponding <b>thymus.js</b> attributes
				that reside within the selected elements.
			</p>
			<h4 id="fragseventprog">Programmatic Event Registration</h4>
			<p>
				Listening for <b>thymus.js</b> events can be done using the standard
				JQuery syntax:
				<code>$(myTemplateElement).on(type, function(event){...})</code>
				- where
				<code>type</code>
				is one of the supported <b>thymus.js</b> events (e.g.
				<code>$('html').on('load.thx.frag', function(event){...})</code>
				).
			</p>
			<h4 id="fragsoptsprog">Programmatic <b>thymus.js</b> Options</h4>
			
		</div>
	</div>
</body>
</html>
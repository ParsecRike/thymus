<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<!-- All relative href/src URLs should be relative to the application's context defined on the Thymus script  -->
<body>
	<div id="paths" class="panel panel-default">
		<div class="panel-heading">
			<h2>Path/Siphon Resolution</h2>
		</div>
		<div class="panel-body app-code">
			<h3 id="fragpath">Fragment Path Resolution</h3>
			<p>
				Because <b>thymus.js</b> runs on the client it's not inherently
				application context aware. Therefore, <b>thymus.js</b> uses a
				configurable
				<code>data-thx-context-path</code>
				attribute on the <b>thymus.js</b> script tag. It's value establishes
				the path to the root context of the application that will be
				resolved along with the fragment's <b>path siphon</b>. <b>path
					siphon</b>s can point to resources with different path levels. So, it's
				important that the
				<code>data-thx-context-path</code>
				synchronizes with the resources defined within the <b>path
					siphon</b>. For example, a fragment that resides in <b>example.com/my-app/frags/nav.htm</b>
				may also be included in <b>example.com/my-app/index.htm</b> as well
				as <b>example.com/my-app/user/info.htm</b>. If the <b>routing
					attribute</b> is defined something like:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
	style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;topnav&quot;</span><span
	style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
</pre></div>
			<p>
				And both <b>example.com/my-app/index.htm</b> and <b>example.com/my-app/user/info.htm</b>
				contain a corresponding <b>routing attribute</b>:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
	style="color: #FF0000">data-thx-include=</span><span
	style="color: #0000FF">&quot;frags/nav/nav :: #topnav&quot;</span><span
	style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
</pre></div>
			<p>
				Then the <b>thymus.js</b> script definitions would be as follows:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;meta</span> <span
						style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span
						style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- example.com/my-app/index.htm --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
						style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span
						style="color: #FF0000">data-thx-context-path=</span><span
						style="color: #0000FF">&quot;.&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>

<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;meta</span> <span
						style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span
						style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- example.com/my-app/user/info.htm --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
						style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;../js/thymus.js&quot;</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span><span
						style="color: #FF0000">data-thx-context-path=</span><span
						style="color: #0000FF">&quot;../&quot;</span> <span
						style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>
			<p>
				Notice that in both resources the
				<code>data-thx-context-path</code>
				points to <b>example.com/my-app</b> with <b>my-app</b> being the
				root context (<b>example.com/my-app/index.htm</b> uses <b>"."</b>
				which infers the current path; which would be <b>example.com/my-app/</b>
				while <b>example.com/my-app/user/info.htm</b> uses <b>"../"</b>
				which infers one directory up; which would be <b>example.com/my-app/</b>).
				This vastly simplifies <b>path siphon</b> resolution (especially for
				nested fragments) and ensures that all <b>path siphon</b>s are
				relative to the root context path of the application. It also
				permits the use of the same context path to be used within multiple
				<b>path siphon</b>s; regardless of where the page that defines it
				resides.
			</p>
			<h4 id="fileextensions">Fragment File Extensions</h4>
			<p>
				File extensions in <b>path siphon</b>s are optional (and sometimes
				undesirable). That's why <b>thymus.js</b>, by default, will use the
				URL defined in a <b>path siphon</b> per verbatim unless a
				<code>data-thx-frag-extension</code>
				is defined. If a
				<code>data-thx-frag-extension</code>
				attribute is defined on the <b>thymus.js</b>
				<code>script</code>
				it will append the
				<code>data-thx-frag-extension</code>
				to any <b>path siphon</b> URL that does not already have a file
				extension and does not end with a &quot;<b>/</b>&quot;. A special
				value of <b>inherit</b> can be used if fragments should inherit the
				parent page file extension (if any). Here are a few variations:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume the following script --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
						style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;../js/thymus.js&quot;</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span>
	<span style="color: #FF0000">data-thx-context-path=</span><span
						style="color: #0000FF">&quot;.&quot;</span> <span
						style="color: #FF0000">data-thx-frag-extension=</span><span
						style="color: #0000FF">&quot;.htm&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the following includes/replacements --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.htm :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>

<span style="color: #008800; font-style: italic">&lt;!-- assume the following script is loaded into a page at path/to/page.html --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
						style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;../js/thymus.js&quot;</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span>
	<span style="color: #FF0000">data-thx-context-path=</span><span
						style="color: #0000FF">&quot;.&quot;</span> <span
						style="color: #FF0000">data-thx-frag-extension=</span><span
						style="color: #0000FF">&quot;inherit&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the following includes/replacements --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.html :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>

<span style="color: #008800; font-style: italic">&lt;!-- assume the following script --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
						style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;../js/thymus.js&quot;</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span>
	<span style="color: #FF0000">data-thx-context-path=</span><span
						style="color: #0000FF">&quot;.&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the following includes/replacements --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person/ :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">data-thx-include=</span><span
						style="color: #0000FF">&quot;/frags/person.xml :: #data&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
</pre></div>
			<h3 id="attrpaths">Attribute Path Resolution</h3>
			<p>
				Relative URLs within the standard URL related attributes are
				resolved using either the path defined within
				<code>data-thx-base-path</code>
				(<a href="#getstarted">more details</a>) or <b>automatically</b> by
				the browser using the
				<code>href</code>
				attribute set on the
				<code>base</code>
				tag. However, some versions of Internet Explorer do not properly
				resolve relative URLs using the <b>base</b> tag. In that case, when
				an
				<code>href</code>
				has been defined on a
				<code>base</code>
				tag and no path has been defined using the
				<code>data-thx-base-path</code>
				attribute or when a path has been defined by using just the
				<code>data-thx-base-path</code>
				attribute, <b>thymus.js</b> will convert the following relative URLs
				to their absolute counterparts that are found within the following
				attributes (<a href="#fragsoptsprog">configurable</a>):
			</p>
			<ul id="attrpathsdflt">
				<li class="badge"><code>action</code></li>
				<li class="badge"><code>archive</code></li>
				<li class="badge"><code>background</code></li>
				<li class="badge"><code>cite</code></li>
				<li class="badge"><code>classid</code></li>
				<li class="badge"><code>codebase</code></li>
				<li class="badge"><code>data</code></li>
				<li class="badge"><code>dynsrc</code></li>
				<li class="badge"><code>formaction</code></li>
				<li class="badge"><code>href</code></li>
				<li class="badge"><code>icon</code></li>
				<li class="badge"><code>longdesc</code></li>
				<li class="badge"><code>lowsrc</code></li>
				<li class="badge"><code>manifest</code></li>
				<li class="badge"><code>poster</code></li>
				<li class="badge"><code>profile</code></li>
				<li class="badge"><code>src</code></li>
				<li class="badge"><code>usemap</code></li>
			</ul>
			<h3 id="otherfragtargets">Siphons</h3>
			<p>
				A <i>siphon</i> in a most practical sense is just one or more JQuery
				selectors with an optional insertion/extraction directives and in
				some cases can also be a
				<code>function</code>
				that will <em>handle</em> the extraction and/or placement of data
				within the DOM. In order to aid in the process of JQuery node
				selection, <b>thymus.js</b> introduces the concept of <b>siphon
					resolver</b>s. A <b>siphon resolver</b> gives a JQuery selector the
				ability to designate how the selected node(s) will be used. <b>siphon
					resolver</b>s come in two flavors:
			</p>
			<ul>
				<li><code>?{}</code> (<b>surrogate siphon resolver</b>) - the
					wrapped JQuery selector will be used to select the node(s) where
					value(s) will be extracted and used to replace the expression
					within the final siphon definition string (can be used within any <b>siphon
						attribute</b>)</li>
				<li><code>|{}</code> (<b>node siphon resolver</b>) - the
					wrapped JQuery selector will be used to select the node(s) used by
					the siphon (<b>parameter siphon</b>s, <b>result siphon</b>s and <b>destination
						siphon</b>s only)</li>
			</ul>
			<p>
				Each <b>siphon resolver</b> can also be used with or without an
				appended
				<code>-&gt;</code>
				directive that indicates how to insert/extract value(s) from the
				selected node(s):
			</p>
			<ul>
				<li><code>text</code> - will use <a
					href="http://api.jquery.com/text/">JQuery.text()</a> to
					insert/extract value(s) returned from the JQuery selected node(s)</li>
				<li><code>html</code> - will use <a
					href="http://api.jquery.com/html/">JQuery.html()</a> to
					insert/extract value(s) returned from the JQuery selected node(s)</li>
				<li>a name of an attribute - will use <a
					href="http://api.jquery.com/attr/">JQuery.attr()</a> to
					insert/extract value(s) returned from the JQuery selected node(s)
				</li>
				<li>no directive - <b>surrogate siphon resolver</b>s will use
					values from <a href="http://api.jquery.com/serializeArray/">JQuery.serializeArray()</a>
					or value(s) from <a href="http://api.jquery.com/val/">JQuery.val()</a>
					(when applicable) to insert/extract value(s) returned from the
					JQuery selected node(s). <b>node siphon resolver</b>s will use the
					default value insertion/extraction operation used by the siphon
					it's defined within.
				</li>
			</ul>
			<h4 id="fragpathsub">Fragment Path Substitutions</h4>
			<p>
				When URLs are dependent upon user input static URLs will not
				suffice. In this case a path substitution can be made using one or
				more <b>surrogate siphon resolver</b>s. Lets consider a <b>path
					siphon</b> where <b>surrogate siphon resolver</b>s can be used. Any <b>surrogate
					siphon resolver</b> found will result in a JQuery node selection. Node
				value(s) will be captured from the queried nodes using the
				appropriate directive and replaced within the <b>path siphon</b>.
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;button</span> <span
	style="color: #FF0000">data-thx-post=</span><span
	style="color: #0000FF">&quot;click&quot;</span> 
	<span style="color: #FF0000">data-thx-post-path=</span><span
						style="color: #0000FF">&quot;frags/first/?{#secondPath-&gt;text}/sixth&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Post Something<span
						style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;secondPath&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>?{#second}/?{#thirdFourthPath :input}/?{.fifth-path-&gt;data-mypath}<span
						style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;select</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;second&quot;</span> <span
						style="color: #FF0000">name=</span><span style="color: #0000FF">&quot;secondPath&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
    <span style="color: #000080; font-weight: bold">&lt;option&gt;</span>second<span
						style="color: #000080; font-weight: bold">&lt;/option&gt;</span>
    <span style="color: #000080; font-weight: bold">&lt;option&gt;</span>2nd<span
						style="color: #000080; font-weight: bold">&lt;/option&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/select&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thirdFourthPath&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
    <span style="color: #000080; font-weight: bold">&lt;input</span> <span
						style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text&quot;</span> <span
						style="color: #FF0000">name=</span><span style="color: #0000FF">&quot;someInput&quot;</span> <span
						style="color: #FF0000">value=</span><span style="color: #0000FF">&quot;third&quot;</span> <span
						style="color: #000080; font-weight: bold">/&gt;</span>
    <span style="color: #000080; font-weight: bold">&lt;input</span> <span
						style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text&quot;</span> <span
						style="color: #FF0000">name=</span><span style="color: #0000FF">&quot;someOtherInput&quot;</span> <span
						style="color: #FF0000">value=</span><span style="color: #0000FF">&quot;fourth&quot;</span> <span
						style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;fifth-path&quot;</span> <span
						style="color: #FF0000">data-mypath=</span><span
						style="color: #0000FF">&quot;fifth&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- result path would be: --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!--frags/first/second/third/fourth/fifth/sixth --&gt;</span>
</pre></div>
			<p>
				The preceeding <b>path siphon</b> would get evaluated when the
				button is clicked. When the first URL siphon is discovered within
				the wrapped
				<code>?{}</code>
				it will capture the node(s) returned by the JQuery
				<code>#secondPath</code>
				selector. The
				<code>-&gt;</code>
				defines a
				<code>text</code>
				directive that will use the <a href="http://api.jquery.com/text/">JQuery.text()</a>
				function to extract the value. Once the path segment is captured
				from the
				<code>#secondPath</code>
				discovery occurs using the same extraction methods on each of the
				<code>?{}</code>
				segments found in
				<code>?{#second}/?{#thirdFourthPath
					:input}/?{.fifth-path-&gt;data-mypath}</code>
				. The
				<code>#second</code>
				JQuery selector has no
				<code>-&gt;</code>
				directive so it uses the default <a
					href="http://api.jquery.com/val/">JQuery.val()</a>. Next, the
				<code>#thirdFourthPath :input</code>
				JQuery selector is used to capture node(s) and <a
					href="http://api.jquery.com/serializeArray/">JQuery.serializeArray()</a>
				is called on the returned node(s) because there is no
				<code>-&gt;</code>
				directive and there is no <a href="http://api.jquery.com/val/">JQuery.val()</a>
				on
				<code>div</code>
				s. Each of the serialized array values are captured and inserted
				into the path separated by a
				<code>/</code>
				(<a href="#fragsoptsprog">configurable</a>). The final
				<code>.fifth-path</code>
				JQuery selector is used to capture the node(s) where the
				<code>-&gt;</code>
				directive for the attribute
				<code>data-mypath</code>
				is evaluated and inserted into the path. The siphoned path then
				becomes
				<code>frags/first/second/third/fourth/fifth/sixth</code>
				.
			</p>
<!-- 			<p> -->
<!-- 				Siphons can also contain HTTP verb scoped variables. Variables are -->
<!-- 				set within -->
<!-- 				<a href="#domvarsiphon"><b>variable siphon</b></a> attributes using -->
<!-- 				a unique variable name followed by a &quot;<b>=</b>&quot; and a -->
<!-- 				value that will be assigned. Assigned values are literal replacements and will not be evaluated using operators like typical JS variables. A -->
<!-- 				<b>variable siphon</b> can also have more than one variable -->
<!-- 				definition by separating them with a &quot;<b>,</b>&quot;. -->
<!-- 				<div class="btn-group" id="userDest2Grp" -->
<!-- 								data-thx-get-path="frags/user/${userKey}?userKey2=${userKey2}" -->
<!-- 								data-thx-get-result="[class^=&quot;thymus-user&quot;]" -->
<!-- 								data-thx-get-dest="#userDestAgent" data-thx-get-type="update"> -->
<!-- 								<button type="button" class="btn btn-primary active"  -->
<!-- 									data-thx-get="load :: click"  -->
<!-- 									data-thx-get-agent="#userDest2Grp" -->
<!-- 									data-thx-get-with="userKey=user1">Include -->
<!-- 									User1</button> -->
<!-- 								<button type="button" class="btn btn-primary" -->
<!-- 									data-thx-get="click"  -->
<!-- 									data-thx-get-agent="#userDest2Grp" -->
<!-- 									data-thx-get-with="userKey=user2,userKey2=${userKey}">Include -->
<!-- 									User2</button> -->
<!-- 								<button type="button" class="btn btn-primary" -->
<!-- 									data-thx-get="click"  -->
<!-- 									data-thx-get-agent="#userDest2Grp" -->
<!-- 									data-thx-get-with="userKey=user3">Include -->
<!-- 									User3</button> -->
<!-- 							</div> -->
<!-- 			</p> -->
			<h4 id="fragparamchain">Chaining Parameter Selectors</h4>
			<p>
				A <b>parameter siphon</b> can contain a single raw JQuery selector
				or can contain one or more <b>surrogate siphon resolver</b>s in
				order to build the final <b>parameter siphon</b> JQuery selector. A
				<b>parameter siphon</b> can also contain one or more <b>node
					siphon resolver</b>s. Each parameter sent will contain a <i>key</i>/<i>value</i>
				pair for each node returned from the JQuery selector results. The <i>key</i>
				will use either the <b>name</b> or <b>id</b> of the selected node
				(in that order of precedence- can be <a href="#fragsoptsprog">configured</a> to
				use a custom set of attributes as well). A simple example would be:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-style: italic">&lt;!-- the following button --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span style="color: #FF0000">data-thx-get=</span><span style="color: #0000FF">&quot;click&quot;</span> <span style="color: #FF0000">data-thx-get-path=</span><span style="color: #0000FF">&quot;/path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-params=</span><span style="color: #0000FF">&quot;|{#one} |{#two-&gt;text} |{#three-&gt;data-my-param}&quot;</span>
	<span style="color: #FF0000">data-thx-get-dest=</span><span style="color: #0000FF">&quot;#myDestw&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>Get Resource<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDestw&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;input</span> <span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text&quot;</span> <span style="color: #FF0000">value=</span><span style="color: #0000FF">&quot;#1 value&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;one&quot;</span> <span style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;two&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>#2 value<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">data-my-param=</span><span style="color: #0000FF">&quot;#3 value&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;three&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would send the parameters: --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- one=%231%20value&amp;two=%232%20value&amp;three=%233%20value --&gt;</span>
</pre></div>
			<h4 id="fragresultchain">Chaining Result Selectors</h4>
			<p>
				A <b>result siphon</b> works slightly different that most other
				siphons. Instead of using the current document when making JQuery
				node selections, it uses the incoming document. If the results have
				a content-type other than HTML or XML the <b>result siphon</b>
				should be either omitted (in which case the entire result will be
				selected) or use a <a href="#fragshandler">result handler</a>. Lets
				take a look at a few scenarios:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume the following fragment snippet resides at path/to/resource --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myResult&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;selClass&quot;</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource2&quot;</span>
		<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult2&quot;</span> <span
						style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;.some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Post
		Something<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>

<span style="color: #008800; font-style: italic">&lt;!-- 1) the page contains the following node that uses a raw JQuery selector --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult&quot;</span> <span
						style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;#myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Get
	Resource<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- when clicked would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult&quot;</span> <span
						style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;#myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Get
	Resource<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;myResult&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;selClass&quot;</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource2&quot;</span>
			<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult2&quot;</span> <span
						style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;.some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Post
			Something<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>


<span style="color: #008800; font-style: italic">&lt;!-- 2) the page contains the following node that siphons JQuery selector(s) --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult ?{#selClass-&gt;data-thx-get-dest}&quot;</span>
	<span style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;#myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Get Resource<span
						style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- when clicked would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span
						style="color: #FF0000">data-thx-get=</span><span
						style="color: #0000FF">&quot;click&quot;</span> <span
						style="color: #FF0000">data-thx-get-path=</span><span
						style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span
						style="color: #0000FF">&quot;#myResult ?{#selClass-&gt;data-thx-get-dest}&quot;</span>
	<span style="color: #FF0000">data-thx-get-dest=</span><span
						style="color: #0000FF">&quot;#myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>Get Resource<span
						style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
						style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;some-class&quot;</span><span
						style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
</pre></div>
			<p>
				In the first example
				<code>.some-class</code>
				is used as the raw JQuery selector for capturing the nodes from the
				fragment results that will be inserted into the DOM. The second
				example uses
				<code>#myResult ?{#selClass-&gt;data-thx-get-dest}</code>
				which contains a <b>siphon resolver</b> that will capture the value
				from the
				<code>data-thx-get-dest</code>
				attribute on the button with the
				<code>selClass</code>
				ID. The <b>result siphon</b> then becomes
				<code>#myResult .some-class</code>
				. There are no more <b>siphon resolver</b>s that need to be
				evaluated in the expression. So, all elements under the element with
				the
				<code>myResult</code>
				ID that have a class of
				<code>some-class</code>
				will be <i>included</i> in the <b>destination siphon</b>.
			</p>
			<p>
				<b>result siphon</b>s can also use <b>node siphon resolver</b>s to
				designate directives that indicate what parts of the selected
				node(s) will be used. Lets take a look at an example:
			</p>
<div class="thymus-demo"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-style: italic">&lt;!-- assume the following fragment snippet resides at path/to/resource --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;my-other-class&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;someData&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;my-class&quot;</span> <span style="color: #FF0000">data-my-attr=</span><span style="color: #0000FF">&quot;abc&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;my-class&quot;</span> <span style="color: #FF0000">data-my-attr=</span><span style="color: #0000FF">&quot;def&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the page contains the following node that siphons JQuery selector(s) --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span style="color: #FF0000">data-thx-get=</span><span style="color: #0000FF">&quot;click&quot;</span> <span style="color: #FF0000">data-thx-get-path=</span><span style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span style="color: #0000FF">&quot;|{.my-class-&gt;data-my-attr} |{.my-other-class}&quot;</span>
	<span style="color: #FF0000">data-thx-get-dest=</span><span style="color: #0000FF">&quot;#myDest&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>Get Resource<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- when clicked would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;button</span> <span style="color: #FF0000">data-thx-get=</span><span style="color: #0000FF">&quot;click&quot;</span> <span style="color: #FF0000">data-thx-get-path=</span><span style="color: #0000FF">&quot;path/to/resource&quot;</span>
	<span style="color: #FF0000">data-thx-get-result=</span><span style="color: #0000FF">&quot;|{.my-class-&gt;data-my-attr} |{.my-other-class}&quot;</span>
	<span style="color: #FF0000">data-thx-get-dest=</span><span style="color: #0000FF">&quot;#myDest&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>Get Resource<span style="color: #000080; font-weight: bold">&lt;/button&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;myDest&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	abcdef
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">class=</span><span style="color: #0000FF">&quot;my-other-class&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;someData&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
</pre></div>
			<div class="alert alert-info">
				<strong>Note:</strong> even though some siphons can simultaneously
				contain raw JQuery selectors as well as <b>node siphon resolver</b>s
				(e.g.
				<code>.my-class |{.my-other-class-&gt;text}</code>
				), the order of usage or insertion into the DOM is not guaranteed as
				it would be for siphons that contained only <b>node siphon
					resolver</b>s (e.g.
				<code>|{.my-class} |{.my-other-class-&gt;text}</code>
				)
			</div>
			<div class="alert alert-info">
				<strong>Note:</strong> although nesting different types of <b>siphon
					resolver</b>s is discouraged for readability sake, <b>node siphon
					resolver</b>s can contain any number of nested <b>surrogate siphon
					resolver</b>s within them (e.g.
				<code>|{?{.my-class}-&gt;text}</code>
				), but <b>surrogate siphon resolver</b>s should <strong>never</strong>
				contain <b>node siphon resolver</b>s (e.g.
				<code>?{|{.my-class-&gt;text}}</code>
				)
			</div>
		</div>
	</div>
</body>
</html>
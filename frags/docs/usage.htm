<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<!-- All relative href/src URLs should be relative to the application's context defined on the Thymus script  -->
<body>
	<div id="usage" class="panel panel-default">
		<div class="panel-heading">
			<h2>
				Usage
			</h2>
		</div>
		<div class="panel-body app-code">
			<p>
				To use <b>thymus.js</b> it obviously needs to be included in the
				page. Here is the minimal setup:
			</p>
					<div style="overflow: auto; width: auto; padding: .2em .6em;">
						<pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;meta</span> <span
								style="color: #FF0000">charset=</span><span
								style="color: #0000FF">&quot;utf-8&quot;</span> <span
								style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- Thymus script --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
								style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span
								style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span
								style="color: #FF0000">data-thx-context-path=</span><span
								style="color: #0000FF">&quot;.&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre>
					</div>
			<p>
				There are two required <b>thymus.js</b> attributes. The
				<code>thymus</code>
				id/namespace is used to identify the <b>thymus.js</b> script in
				order to capture various attribute options on the script tag while
				the
				<code>data-thx-context-path</code>
				is used for <a href="#fragpath">fragment path resolution</a> and <a
					href="#attrpaths">attribute path resolution</a>. It should point
				to the root context of the application relative to the page in
				which <b>thymus.js</b> is loaded.
			</p>
			<h2 id="fragusage">Fragments</h2>
			<p>
				Fragments are at the core of <b>thymus.js</b> and are used to
				populate full or partial updates to the browser UI. <b>thymus.js</b>
				assumes that fragmented portions of the UI are fragile and
				exceedingly dynamic in nature and therefore does not try to <i>bind</i>
				data that may reside in various sections of the UI. Doing so is
				prone to memory leaks- especially when a fragment contains
				child/nested fragments. Instead, <b>thymus.js</b> utilizes the power
				of <a href="http://api.jquery.com/category/selectors/">JQuery
					selectors</a> to define routes for fragmented content. Not only does
				this provide a friendly and familiar interface, but it also
				eliminates the need to require <i>model</i> observability/binding
				extensions via JavaScript and lends itself to stateless/<a
					href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a>
				server APIs.
			</p>
			<p>
				<b>thymus.js</b> recognizes two types of fragments. The first being
				<i>view</i> fragments. Any fragments retrieved that have a
				<code>content-type</code>
				of
				<code>text/html</code>
				will be interpreted as a <i>view</i> content. Similarly, fragments
				with <a href="#textfrags">raw <code>content-type</code>
					identifiers
				</a> will also be interpreted as <i>view</i> content, but will have
				limited <i>model</i> interaction capabilities. Any of the <a
					href="#modeltoview"><i>model</i> <code>content-type</code>
					identifiers </a> and are interpreted as <i>model</i> content and
				updated in corresponding <i>views</i> via <a href="#modeltoview"><i>model</i>
					routing techniques</a>.
			</p>
			<p>
				Fragments are simply defined using the
				<code>data-thx-fragment</code>
				attribute and assigning a unique fragment name/target to its value.
				The fragment can then be used as either a replacement or inclusion
				anywhere a
				<code>data-thx-replace</code>
				or
				<code>data-thx-include</code>
				attribute is found that contains matching fragment name/target. Each
				<code>data-thx-replace</code>
				/
				<code>data-thx-include</code>
				attribute contains two parts that are separated by a "<b>::</b>"
				(the separator can be overridden using the
				<code>data-thx-separator</code>
				attribute on the <b>thymus.js</b> script definition or <a
					href="#fragsoptsprog">programmatically by passing the
					appropriate option parameter</a>). The first part is the URL and should
				point to the fragment content that will be loaded. The second part
				defines the fragment name/target that should be included or replaced
				with the returned result of the URL (see the <a href="#paths">Path
					Resolution</a> section for details on how URLs are resolved and for
				fragment name options). The site you are viewing uses the following
				fragment for the top navigation bar that points to a URL <b>frags/nav/nav</b>
				and fragment called <b>topnav</b>.
			</p>
<div style="overflow: auto; width: auto; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume a resource resides at &quot;frags/nav/nav&quot; --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- that contains the following --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the current page contains --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-replace=</span><span
								style="color: #0000FF">&quot;frags/nav/nav :: topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
</pre>
					</div>
			<p>
				Of course, we could have also used a
				<code>data-thx-include</code>
				instead of
				<code>data-thx-replace</code>
				which would have appended the fragment rather than replacing the
				placeholder:
			</p>
					<div style="overflow: auto; width: auto; padding: .2em .6em;">
						<pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume a resource resides at &quot;frags/nav/nav&quot; --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- that contains the following --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the current page contains --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-include=</span><span
								style="color: #0000FF">&quot;frags/nav/nav :: topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;span&gt;</span>Top Nav<span
								style="color: #000080; font-weight: bold">&lt;/span&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-include=</span><span
								style="color: #0000FF">&quot;frags/nav/nav :: topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;span&gt;</span>Top Nav<span
								style="color: #000080; font-weight: bold">&lt;/span&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
</pre>
					</div>
			<p id="selfref">
				Templates can also refer to fragments that exist in the same page
				they are included/replaced in by using
				<code>this</code>
				or omitting the URL altogether (e.g.
				<code>data-thx-include="::selfTemp"</code>
				).
			</p>
					<div style="overflow: auto; width: auto; padding: .2em .6em;">
						<pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- a page with --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-include=</span><span
								style="color: #0000FF">&quot;this :: selfTemp&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;selfTemp&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would produce --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-include=</span><span
								style="color: #0000FF">&quot;this :: selfTemp&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		...
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;selfTemp&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;selfTemp&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
</pre>
					</div>
			<h3 id="nestedfrags">Multi-Level Nested Fragments</h3>
			<p>
				Not only can fragments be <i>included</i> or <i>replaced</i>
				within a page, but the fragments themselves can load other
				fragments (the number of levels of fragments within fragments can
				be relatively endless). Just like normal fragments, each neseted
				fragment will be processed asynchronously from its parent
				fragment. This ensures that as a new fragment is discovered it
				will be loaded and its content made available for any subsequent
				fragments that are encountered that point to the same URL. It also
				prevents unecessary calls for fragment content that may have more
				than one fragment definition. The <i>Guest User</i> dropdown menu
				in the top navigation bar illustrates the use of nested fragments.
				When the <b>frags/nav/nav</b> fragment was encountered for the <b>topnav</b>
				fragment it discovered a
				<code>data-thx-replace</code>
				within the results and proceeded to load <b>frags/user/user</b>
				for the <b>user</b> fragment and loaded it into its parent
				fragment. To illustrate this concept consider the following:
			</p>
					<div style="overflow: auto; width: auto; padding: .2em .6em;">
						<pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume a resource resides at &quot;frags/nav/nav&quot; --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- that contains the following fragment --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-replace=</span><span
								style="color: #0000FF">&quot;frags/user/user :: user&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		...
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and assume a resource resides at &quot;frags/nav/user&quot; --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- that contains the following fragment --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;user&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
	...
<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the current page contains --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-replace=</span><span
								style="color: #0000FF">&quot;frags/nav/nav :: topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;topnav&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;user&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
			...
		<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
</pre>
					</div>
			<h3 id="headfrags">Head Fragments</h3>
			<p>
				Almost every browser removes
				<code>head</code>
				attributes when parsing an HTML DOM. So, the <b>thymus.js</b>
				script definition needs to have an additional attribute to handle
				<code>head</code>
				fragment inclusions (replcacements are treated the same as
				includes for
				<code>head</code>
				tags). If the browser doesn't strip out the
				<code>data-thx-include</code>
				on the
				<code>head</code>
				tag it will be used. Otherwise, an attempt will be made to capture
				<code>data-thx-head-frag</code>
				as in the following example:
			</p>
					<div style="overflow: auto; width: auto; padding: .2em .6em;">
						<pre style="margin: 0; line-height: 125%">
<span style="color: #000080; font-weight: bold">&lt;head</span> <span
								style="color: #FF0000">data-thx-include=</span><span
								style="color: #0000FF">&quot;frags/head :: header&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;meta</span> <span
								style="color: #FF0000">charset=</span><span
								style="color: #0000FF">&quot;utf-8&quot;</span> <span
								style="color: #000080; font-weight: bold">/&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- Thymus script --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;script </span><span
								style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span
								style="color: #FF0000">id=</span><span
								style="color: #FF0000">data-thx-context-path=</span><span
								style="color: #0000FF">&quot;.&quot;</span>
	<span style="color: #FF0000">data-thx-head-frag=</span><span
								style="color: #0000FF">&quot;data-thx-include=frags/head :: header&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre>
					</div>
			<p>
				Although this duplicates the inclusion defintion it does provide
				for cross-browser support. If this redundency disrupts your inner
				chi you can ommit the
				<code>data-thx-include</code>
				attribute from the
				<code>head</code>
				tag and the
				<code>data-thx-head-frag</code>
				will still be picked up.
			</p>
			<h3 id="scriptfrags">Script Fragments</h3>
			<p>
				<code>script</code>
				tags will be inserted individually in the order they are defined
				within a fragment. Just like any other fragments that are loaded
				<code>script</code>
				tags found within a fragment will also fire a <a href="#frag">fragment
					event</a> for each script that is loaded within the fragment
				destination. Multiple
				<code>script</code>
				tags can be wrapped in a parent node (like the following), but each
				of them will still fire their own <a href="#frag">fragment event</a>
				individually.
			</p>
<div style="overflow: auto; width: auto; padding: .2em .6em;">
<pre style="margin: 0; line-height: 125%">
<span style="color: #008800; font-style: italic">&lt;!-- assume a resource resides at &quot;frags/script&quot; --&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- that contains the following fragment --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;h1&gt;</span>Never Rendered (outside fragment)<span
								style="color: #000080; font-weight: bold">&lt;/h1&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;scripts&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;script </span><span
								style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;//code.jquery.com/jquery.min.js&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;script </span><span
								style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/app.js&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;script </span><span
								style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;data:text/javascript,function tst(m){alert(m)}&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- and the current page contains --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;h1&gt;</span>My Page<span
								style="color: #000080; font-weight: bold">&lt;/h1&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-replace=</span><span
								style="color: #0000FF">&quot;frags/script :: scripts&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
<span style="color: #008800; font-style: italic">&lt;!-- would result in --&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;body&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;h1&gt;</span>My Page<span
								style="color: #000080; font-weight: bold">&lt;/h1&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;div</span> <span
								style="color: #FF0000">data-thx-fragment=</span><span
								style="color: #0000FF">&quot;scripts&quot;</span><span
								style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">&lt;script&gt;function</span> tst(m){alert(m)}<span
								style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;/div&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/body&gt;</span>
</pre>
					</div>
		<div class="alert alert-info">
			<strong>Note:</strong> You may have noticed that the
			<code>script</code>
			tags that are defined in the <b>scripts</b> fragment that have a
			normal URL
			<code>src</code>
			are not present in the resulting <i>replacement</i>. This is
			because there is nothing to <i>include</i>/<i>replace</i> in the
			DOM. However, any
			<code>script</code>
			that is inlined or contains a
			<code>src</code>
			with a
			<code>data:text/javascript,</code>
			will appear in the resulting DOM.
		</div>
		<div class="alert alert-success">
			<strong>Tip:</strong> To make it easier to debug
			<code>script</code>
			that is dynamically loaded by <b>thymus.js</b> include a
			<code>//# sourceURL=path/to/app.js</code>
			at the end of its source file. Some browsers like <a
				href="https://developers.google.com/chrome-developer-tools/docs/javascript-debugging?#source-maps">Google
				Chrome</a> will interperate the comment as a source mapping that will
			identify the
			<code>script</code>
			in the debugger.
		</div>
		<h3 id="frag">Fragment Events</h3>
			<p>
				After each time an attempt to load a fragment is made a <b>fragment
					event</b> is fired. Also, each
				<code>script</code>
				tag within a fragment will also fire its own <b>fragment event</b>.
				Event propagation utilizes the <a
					href="http://api.jquery.com/trigger/">JQuery event trigger</a>
				mechanism. Fragment events have full DOM capabilities (e.g. <a
					href="http://api.jquery.com/event.stopPropagation/">event.stopPropagation</a>,
				etc.) One way to listen to all incoming fragment events is to supply
				a
				<code>function</code>
				to the
				<code>data-thx-onfrag</code>
				attribute on the <b>thymus.js</b> tag itself:
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;meta</span> <span style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span style="color: #000080; font-weight: bold">/&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">function</span> fragListener(event) {
			<span style="color: #008800; font-style: italic">// event.namespace will be frag.thx</span>
			<span style="color: #008800; font-style: italic">// &quot;this&quot; will reference the element that loaded the fragment</span>
			<span style="color: #000080; font-weight: bold">var</span> template = <span style="color: #000080; font-weight: bold">this</span>;
			<span style="color: #000080; font-weight: bold">switch</span> (event.type) {
			<span style="color: #000080; font-weight: bold">case</span> <span style="color: #0000FF">&#39;beforeload&#39;</span>:
				<span style="color: #008800; font-style: italic">// handle event</span>
				<span style="color: #000080; font-weight: bold">break</span>;
			<span style="color: #000080; font-weight: bold">case</span> <span style="color: #0000FF">&#39;load&#39;</span>:
				<span style="color: #008800; font-style: italic">// handle event</span>
				<span style="color: #000080; font-weight: bold">break</span>;
			}
		}
	<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span style="color: #FF0000">data-thx-context-path=</span><span style="color: #0000FF">&quot;.&quot;</span>
		<span style="color: #FF0000">data-thx-onfrag=</span><span style="color: #0000FF">&quot;fragListener()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>
			<p>
				In the example above a
				<code>function</code>
				called <i>fragListener</i> is defined as the
				<code>data-thx-onfrag</code>
				. Every time an attempt is made to load a fragment and a response is
				returned the <i>window.fragListener</i> function will be called.
				Within the
				<code>function</code>
				,
				<code>this</code>
				will reference the element that initiated the fragment load while
				the passed
				<code>event</code>
				will reference a <a href="#fragevent">fragment event</a>. Supplied
				functions can also contain additional argument values by adding them
				to the function signature (e.g.
				<code>data-thx-onfrag="fragListener(event, 'myValue')"</code>
				). The function will always pass
				<code>event</code>
				as its first argument.
			</p>
			<p id="fraginjs">
				Similarly, we could have listened for the event using the element
				where the <i>include</i> or <i>replace</i> attributes are defined <a
					href="#fragseventprog">programmatically</a>. A <a href="#fragevent">fragment
					event</a> contains the following properties:
			</p>
			<div id="fragevent" class="panel panel-default">
				<div class="panel-heading">
					<h2>
						Fragment Event (extends <a
							href="http://api.jquery.com/category/events/event-object/">EventObject</a>)
					</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							one of the event types below
							<ul>
								<li><code>beforeload.thx.frag</code> - before the fragment
									has been retrieved (when the <a
									href="http://api.jquery.com/event.isDefaultPrevented/">event.isDefaultPrevented()</a>
									returns <b>true</b> the fragment will not be retrieved)</li>
								<li><code>beforedom.thx.frag</code> - after the fragment
									has been retrieved, but not updated in the DOM (when the <a
									href="http://api.jquery.com/event.isDefaultPrevented/">event.isDefaultPrevented()</a>
									returns <b>true</b> the fragment will not be updated in the
									DOM)</li>
								<li><code>afterdom.thx.frag</code> - after the fragment has
									been retrieved and updated in the DOM (any child/nested
									fragments may not be loaded yet)</li>
								<li><code>load.thx.frag</code> - after the fragment has
									been retrieved, updated in the DOM and all child/nested
									fragments have been loaded/cancelled/etc.</li>
							</ul>
							Any of the above event types can be used when <a href="#fraginjs">programatically
								registering a listener for the event</a>). See <a
								href="http://api.jquery.com/on/#event-names">JQuery event
								naming</a> for namespace convention details.
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragUrl</code>
						</div>
						<div class="col-md-10">the URL of the fragment that an
							attempt was made to load</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragStack</code>
						</div>
						<div class="col-md-10">
							an array of fragment objects in order from the current fragment
							to each of the consecutive nested parent fragments (will have
							only one entry when the fragment is not nested within any other
							fragments). Each entry will contain the following properties:
							<ul>
								<li><code>url</code> - the fragment URL</li>
								<li><code>target</code> - the fragment target</li>
								<li><code>destination</code> - the fragment destination</li>
								<li><code>source</code> - the fragment destination</li>
							</ul>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragPendingPeerCount</code>
						</div>
						<div class="col-md-10">the number of child fragments that
							are pending for the current fragment's parent fragment (if any)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragTarget</code>
						</div>
						<div class="col-md-10">
							either the value used in a
							<code>data-thx-fragment</code>
							, <a href="http://api.jquery.com/category/selectors/">JQuery
								selector</a> used to select the fragment or the
							<code>function</code>
							called that handled the processing of the fragment
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragDestination</code>
						</div>
						<div class="col-md-10">
							either the DOM element, a <a
								href="http://api.jquery.com/category/selectors/">JQuery
								selector</a> to the DOM element(s) where the fragment will be
							placed, or
							<code>undefined</code>
							when the fragment is a
							<code>script</code>
							.
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCount</code>
						</div>
						<div class="col-md-10">the number of total fragments load
							attempts</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCurrTotal</code>
						</div>
						<div class="col-md-10">the current number of total
							fragments that will or have had an attempt to load (may grow as
							new script tags or nested fragments are discovered)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>source</code>
						</div>
						<div class="col-md-10">
							the DOM node that was included/replaced or the parent node when
							the fragment was not HTML content or outer HTML string when the
							fragment was a
							<code>script</code>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>scope</code>
						</div>
						<div class="col-md-10">
							the DOM node for which the fragment was loaded under (typically
							this will be the
							<code>html</code>
							node unless the fragment has been loaded manually via a
							different node)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>error</code>
						</div>
						<div class="col-md-10">
							an object representing error details that will contain the
							following properties (if the fragment loaded successfully error
							will be null):
							<ul>
								<li><code>message</code> - the error message</li>
								<li><code>cause</code> - the originating error (if any)</li>
								<li><code>status</code> - the HTTP status (if applicable)</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<div class="alert alert-warning">
				<strong>Reminder!</strong> Keep in mind the
				<code>function</code>
				defined as the
				<code>data-thx-onfrag</code>
				must be available for execution at the time that the fragment event
				received.<br /> <br /> <strong>Note:</strong> There are two ways
				to manipulate/massage incoming fragment content. The first way is
				using the
				<code>data-thx-onfrag</code>
				attribute and/or registering a <a href="#fraginjs">fragment
					event listener</a>; Both of which require evaluating the supplied <a
					href="#fragevent">fargment event</a>. The second way is using a <a
					href="#funcfrags">fragment result handler</a>.
			</div>
			<h3 id="frags">Fragments Events</h3>
			<p>
				Similar to <a href="#frag">fragment events</a>, a <a
					href="#fragsevent">fragments event</a> will be fired once an
				attempt to load all of the fragments/
				<code>script</code>
				/etc. has been made. One way to capture fragments events is to
				supply a
				<code>function</code>
				to the
				<code>data-thx-onfrags</code>
				on the <b>thymus.js</b> tag itself:
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;head&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;meta</span> <span style="color: #FF0000">charset=</span><span style="color: #0000FF">&quot;utf-8&quot;</span> <span style="color: #000080; font-weight: bold">/&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
		<span style="color: #000080; font-weight: bold">function</span> done(event) {
			<span style="color: #008800; font-style: italic">// &quot;this&quot; will reference the element that loaded the fragments</span>
			<span style="color: #008800; font-style: italic">// (the HTML element when auto-loaded)</span>
			<span style="color: #000080; font-weight: bold">var</span> template = <span style="color: #000080; font-weight: bold">this</span>;
			<span style="color: #008800; font-style: italic">// handle event</span>
		}
	<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
	<span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">src=</span><span style="color: #0000FF">&quot;js/thymus.js&quot;</span> <span style="color: #FF0000">id=</span><span style="color: #0000FF">&quot;thymus&quot;</span> <span style="color: #FF0000">data-thx-context-path=</span><span style="color: #0000FF">&quot;.&quot;</span>
		<span style="color: #FF0000">data-thx-onfrags=</span><span style="color: #0000FF">&quot;done()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;/head&gt;</span>
</pre></div>
			<p>
				In the example above a
				<code>function</code>
				called <i>done</i> is defined as the
				<code>data-thx-onfrags</code>
				. Once an attempt is made to load all the defined
				fragment/scripts/nested fragments and a response is returned for
				each of them the example <i>window.done</i>
				<code>function</code>
				will be called with
				<code>this</code>
				referencing the element that initiated the loading of the fragments
				(the HTML element when <a href="#deferred">auto-loaded</a>) and
				<code>event</code>
				referencing a <a href="#fragsevent">fragments event</a>. Supplied
				functions can also contain additional argument values by adding them
				to the function signature (e.g.
				<code>data-thx-onfrags="done(event, 'myValue')"</code>
				).
			</p>
			<p id="fragsinjs">
				Similarly, we could have listened for the event using the element(s)
				that initiated the loading of the <i>include</i> or <i>replace</i>
				attributes <a href="#fragseventprog">programmatically</a>. A <a
					href="#fragsevent">fragments event</a> contains the following
				properties:
			</p>
			<div id="fragsevent" class="panel panel-default">
				<div class="panel-heading">
					<h2>
						Fragments Event (extends <a
							href="http://api.jquery.com/category/events/event-object/">EventObject</a>)
					</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							the type of event (defaults to
							<code>load.thx.frags</code>
							which is used when <a href="#fragsinjs">programatically
								registering a listener for the event</a>)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>fragCount</code>
						</div>
						<div class="col-md-10">the total number of fragments that
							were attempted to load (including nested fragments and scripts)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>scope</code>
						</div>
						<div class="col-md-10">
							the DOM node for which the fragments were loaded under
							(typically this will be the
							<code>html</code>
							node unless the fragments have been loaded manually via a
							different node)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>errors</code>
						</div>
						<div class="col-md-10">a comma delimited string of
							detailed error messages (if all fragments loaded successfully,
							errors will be empty)</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>errors</code>
						</div>
						<div class="col-md-10">
							an array of objects that represent error details- each object
							will contain the following properties (if all the fragments
							loaded successfully the array will be empty):
							<ul>
								<li><code>message</code> - the error message</li>
								<li><code>cause</code> - the originating error (if any)</li>
								<li><code>status</code> - the HTTP status (if applicable)</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<h3 id="funcfrags">Customizing Fragment Results</h3>
			<p>
				Not only can fragment targets contain corresponding
				<code>data-thx-fragment</code>
				names or JQuery <i>selectors</i>, they can also contain a
				<code>function</code>
				that will handle raw fragment results.
			</p>
<div style="overflow:auto;width:auto;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">&lt;script </span><span style="color: #FF0000">type=</span><span style="color: #0000FF">&quot;text/javascript&quot;</span><span style="color: #000080; font-weight: bold">&gt;</span>
	<span style="color: #000080; font-weight: bold">function</span> handleFrag() {
		<span style="color: #000080; font-weight: bold">var</span> handle = <span style="color: #000080; font-weight: bold">this</span>.handle;
		<span style="color: #000080; font-weight: bold">var</span> newData = handle.data;
		<span style="color: #008800; font-style: italic">// do something with newData then process it</span>
		handle.process(newData);
	}
<span style="color: #000080; font-weight: bold">&lt;/script&gt;</span>
<span style="color: #000080; font-weight: bold">&lt;div</span> <span style="color: #FF0000">data-thx-include=</span><span style="color: #0000FF">&quot;frags/nav/nav :: handleFrag()&quot;</span><span style="color: #000080; font-weight: bold">&gt;&lt;/div&gt;</span>
</pre></div>
			<div id="fragshandler" class="panel panel-default">
				<div class="panel-heading">
					<h2>Fragment Result Handler</h2>
				</div>
				<div class="panel-body">
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>source</code>
						</div>
						<div class="col-md-10">the DOM node that contains the
							include/replace definition</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>type</code>
						</div>
						<div class="col-md-10">
							either <b>include</b> or <b>replace</b>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>data</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX data</a> (result string)
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>status</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX status</a>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>xhr</code>
						</div>
						<div class="col-md-10">
							the <a href="http://api.jquery.com/jQuery.ajax/">JQuery
								AJAX XHR object</a>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>process</code>
						</div>
						<div class="col-md-10">
							a
							<code>function</code>
							that will process the <i>inclusion</i> or <i>replacement</i>.
							Arguments:
							<ol>
								<li>the result <b>data</b> (raw or node) that will be <i>included</i>
									or <i>replaced</i>
								</li>
							</ol>
						</div>
					</div>
					<div class="row row-thymus">
						<div class="col-md-2">
							<code>error</code>
						</div>
						<div class="col-md-10">
							an object that will contain the following properties (null when
							an error has not occurred)
							<ul>
								<li><code>message</code> - the error message</li>
								<li><code>cause</code> - the originating error (if any)</li>
								<li><code>status</code> - the HTTP status (if applicable)</li>
							</ul>
						</div>
					</div>
				</div>
			</div>
			<div class="alert alert-warning">
				<strong>Reminder!</strong> Keep in mind the
				<code>function</code>
				defined as the fragment target must be available for execution at
				the time that the fragment result is returned.
			</div>
			<h3 id="fragsprog">Programmatic Usage</h3>
			<p>
				By default, <b>thymus.js</b> loads any fragment/navigation/etc.
				attribute designations that may exist within the
				<code>html</code>
				tag, at startup.To <i id="deferred">defer</i> <b>thymus.js</b> from
				loading any fragments until a later time, just add a
				<code>data-thx-deferred-load="true"</code>
				to the <b>thymus.js</b>
				<code>script</code>
				declaration. Loading <b>thymus.js</b> fragments anytime after
				deferment can be accomplished by executing a <a
					href="#actionfragsload">fragments load action</a>.
			</p>
			<p>
				Any of the following <b>thymus.js</b> actions can be invoked by
				calling
				<code>$(theSelector).thymus(theAction)</code>
				(i.e.
				<code>$('html').thymus('frags.load');</code>
				) using one of the following actions:
			</p>
			<ul>
				<li id="actionfragsload"><code>frags.load</code> - looks for
					template attributes on DOM elements under the element that
					initiated the plug-in call and loads any fragments/nested
					fragments, performs any <a href="#actionnavreg">navigation
						registrations</a> needed within returned fragments and</li>
				<li id="actionnavreg"><code>nav.register</code> - loads all of
					the fragments under the DOM element that initiated the plug-in call</li>
			</ul>
			<p>
				Of course, the <a href="http://api.jquery.com/category/selectors/">JQuery
					selector</a> doesn't have to be
				<code>html</code>
				, but keep in mind that each selector designation used to invoke <b>thymus.js</b>
				actions will reprocess any corresponding <b>thymus.js</b> attributes
				that reside within the selected elements.
			</p>
			<h4 id="fragseventprog">Programmatic Event Registration</h4>
			<p>
				Listening for <b>thymus.js</b> events can be done using the standard
				JQuery syntax:
				<code>$(myTemplateElement).on(type, function(event){...})</code>
				- where
				<code>type</code>
				is one of the supported <b>thymus.js</b> events (e.g.
				<code>$('html').on('load.thx.frag', function(event){...})</code>
				).
			</p>
			<h4 id="fragsoptsprog">Programmatic <b>thymus.js</b> Options</h4>
			
		</div>
	</div>
</body>
</html>